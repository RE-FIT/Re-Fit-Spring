# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: CD

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: set yaml secret
      uses: microsoft/variable-substitution@v1
      with:
        files: './src/main/resources/application.yml'
      env:
        spring.datasource.url: ${{ secrets.DATABASE_URL }}
        spring.datasource.username: ${{ secrets.DATABASE_USERNAME }}
        spring.datasource.password: ${{ secrets.DATABASE_PASSWORD }}
        spring.mail.username: ${{ secrets.EMAILHOST }}
        spring.mail.password: ${{ secrets.EMAILPASSWORD }}
        spring.redis.host: ${{ secrets.REDISHOST }}
        token.issuer: ${{ secrets.ISSUER }}
        cloud.aws.s3.bucket: ${{ secrets.BUCKETNAME}}
        cloud.aws.credentials.access-key: ${{ secrets.S3ACCESSKEY}}
        cloud.aws.credentials.secret-key: ${{ secrets.S3SECRETKEY}}


    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'adopt'
        
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
      uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
      with:
        arguments: build

    - name: docker build and push
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -t ${{ secrets.DOCKER_REPO }}/refit-spring .
        docker build -f dockerfile-nginx -t ${{ secrets.DOCKER_REPO }}/refit-nginx .
        docker push ${{ secrets.DOCKER_REPO }}/refit-spring
        docker push ${{ secrets.DOCKER_REPO }}/refit-nginx

    - name: Deploy
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.HOST }}
        username: ubuntu
        key: ${{ secrets.KEY }}
        script: |
          sudo docker rm -f $(docker ps -qa)
          sudo docker pull ${{ secrets.DOCKER_REPO }}/refit-spring
          sudo docker pull ${{ secrets.DOCKER_REPO }}/refit-nginx
          docker-compose up -d
          docker image prune -f